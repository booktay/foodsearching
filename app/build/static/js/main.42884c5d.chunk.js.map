{"version":3,"sources":["pages/Header.js","pages/SearchID.js","pages/SearchKeyword.js","pages/EditID.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["styles","makeStyles","theme","root","flexGrow","display","flexDirection","alignItems","grow","navbar","background","link","textDecoration","color","Header","classes","className","AppBar","position","Toolbar","Typography","variant","headername","to","ButtonGroup","aria-label","Button","axios","require","SearchID","state","searchID","reviewID","reviewText","modifiedDate","getdata","bind","handleClickSearch","searchBox","resultCard","handleEmpty","this","test","setState","defaults","baseURL","get","response","status","data","Date","toUTCString","props","Paper","component","searchroot","InputBase","input","placeholder","value","onChange","e","target","Divider","divider","orientation","IconButton","iconButton","onClick","Card","cardroot","CardHeader","title","CardContent","gutterBottom","reviewtext","modifieddate","Container","Grid","container","spacing","item","xs","Component","withStyles","minHeight","padding","width","marginLeft","flex","height","margin","textAlign","SearchKeyword","handleChangePage","event","page","searchKeyword","foodKeyword","resultDatas","errorMessage","maxScore","quantity","totalCard","handlePagination","handleHasresult","handleNoresult","cardTotalroot","cardTotalcontent","document","source","score","id","text","key","subheader","cardcontent","count","Math","ceil","Pagination","size","paginationroot","slice","map","paddingBottom","paddingTop","EditID","modifiedText","editdata","inputBox","put","alert","multiline","fullWidth","rows","rowsMax","textfield","backgroundColor","MyRouter","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.42884c5d.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport { NavLink } from \"react-router-dom\";\n\nconst styles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    navbar: {\n        background: \"white\",\n    },\n    link: {\n        textDecoration: \"none\",\n        color: \"#1b6ca8\",\n    }\n}));\n\nexport default function Header() {\n    const classes = styles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\" className={classes.navbar}>\n                <Toolbar>\n                    <Typography variant=\"h5\" className={classes.headername}>\n                        <NavLink to=\"/\" className={classes.link}>Food Searching UI</NavLink>\n                    </Typography>\n                    <div className={classes.grow} />\n                    <ButtonGroup variant=\"text\" aria-label=\"text primary button group\">\n                        <Button><NavLink to=\"/\" className={classes.link}>Find Review by ID</NavLink></Button>\n                        <Button><NavLink to=\"/keyword\" className={classes.link}>Find Review by Keyword</NavLink></Button>\n                        <Button><NavLink to=\"/edit\" className={classes.link}>Edit Review by ID</NavLink></Button>\n                    </ButtonGroup>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Container } from \"@material-ui/core\";\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst axios = require('axios');\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        minHeight: '100vh'\n    },\n    searchroot: {\n        padding: '2px 4px',\n        display: 'inline-flex',\n        alignItems: 'center',\n        width: '73vw',\n        minHeight: '7vh',\n    },\n    input: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n    cardroot: {\n        display: 'inline-block',\n        width: '73vw',\n        textAlign: 'left',\n        color: '#1b6ca8',\n    },\n    reviewtext: {\n        textAlign: 'left',\n        padding: '10px 20px 10px 20px',\n        color: '#000000',\n    },\n    modifieddate: {\n        textAlign: 'right',\n    }\n});\n\nclass SearchID extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            searchID : \"\",\n            reviewID : null,\n            reviewText : null,\n            modifiedDate : null,\n        }\n\n        this.getdata = this.getdata.bind(this)\n        this.handleClickSearch = this.handleClickSearch.bind(this);\n\n        this.searchBox = this.searchBox.bind(this);\n        this.resultCard = this.resultCard.bind(this);\n        this.handleEmpty = this.handleEmpty.bind(this);\n    }\n\n    handleClickSearch() {\n        const { searchID } = this.state\n        \n        if (searchID !== \"\" && /^\\d+$/.test(searchID)) {\n            this.getdata(searchID)\n        } else {\n            this.setState(state => {\n                state.reviewID=\"Input Error\";\n                state.reviewText=null;\n                return state\n            });\n        }\n    }\n\n    async getdata(reviewID) {\n        axios.defaults.baseURL = 'http://localhost:5555'\n        const response = await axios.get('/reviews/' + reviewID, {})\n        if (response.status === 200) {\n            if (response.data[\"_source\"]) {\n                var modifiedDate = new Date(response.data[\"_source\"][\"modified\"]/1000000);\n                modifiedDate = modifiedDate.toUTCString();\n                this.setState(state => {\n                    state.reviewID = response.data[\"_source\"][\"reviewid\"];\n                    state.reviewText = response.data[\"_source\"][\"reviewtext\"];\n                    state.modifiedDate = modifiedDate;\n                    return state\n                });\n            } else {\n                this.setState(state => {\n                    state.reviewID = response.data[\"Message\"];\n                    state.reviewText = null;\n                    return state\n                });\n            }\n        }\n    }\n\n    searchBox() {\n        const { classes } = this.props;\n        const { searchID } = this.state;\n\n        return (\n            <Paper component=\"form\" className={classes.searchroot}>\n                <InputBase\n                    className={classes.input}\n                    placeholder=\"Search Food Reviews Ex. 1\"\n                    value={searchID}\n                    onChange={e => this.setState({ searchID: e.target.value })}\n                />\n                <Divider className={classes.divider} orientation=\"vertical\" />\n                <IconButton color=\"primary\" className={classes.iconButton} onClick={this.handleClickSearch}>\n                    <SearchIcon />\n                </IconButton>\n            </Paper>\n        );\n    }\n\n    resultCard() {\n        const { classes } = this.props;\n        const { reviewID, reviewText, modifiedDate } = this.state;\n\n        return (\n            <Card className={classes.cardroot}>\n                <CardHeader\n                    title={\"Review ID : \" + reviewID}\n                />\n                { reviewText ?\n                <CardContent>\n                    <Typography variant=\"subtitle1\" gutterBottom>\n                        Review Text\n                    </Typography>\n                    <Typography variant=\"body1\" component=\"p\" className={classes.reviewtext}>\n                        {reviewText}\n                    </Typography>\n                    <Typography variant=\"body2\" component=\"p\" color=\"secondary\" className={classes.modifieddate}>\n                        Last modified : {modifiedDate}\n                    </Typography>\n                </CardContent> : this.handleEmpty()}\n            </Card>\n        );\n    }\n\n    handleEmpty() {\n        return (\n            <Fragment></Fragment>\n        );\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { reviewID } = this.state;\n\n        return (\n            <div className={classes.root}>\n                <Container>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12}>\n                            <h1>Search Food Review by ReviewID</h1>\n                        </Grid>\n                        <Grid item xs={12}>\n                            {this.searchBox()}\n                        </Grid>\n                        <Grid item xs={12}>\n                            {reviewID ? this.resultCard() : this.handleEmpty() }\n                        </Grid>\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nSearchID.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SearchID);","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Container } from \"@material-ui/core\";\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Pagination from '@material-ui/lab/Pagination';\n\nconst axios = require('axios');\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        minHeight: '100vh'\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    searchroot: {\n        padding: '2px 4px',\n        display: 'inline-flex',\n        alignItems: 'center',\n        width: '73vw',\n        minHeight: '7vh',\n    },\n    input: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n    cardTotalroot: {\n        display: 'inline-block',\n        width: '20vw',\n        minHeight: '10vh',\n        textAlign: 'left',\n        color: '#1b6ca8',\n    },\n    cardTotalcontent: {\n        paddingBottom: '24px',\n    },\n    cardroot: {\n        display: 'inline-block',\n        width: '73vw',\n        textAlign: 'left',\n        color: '#1b6ca8',\n    },\n    cardcontent: {\n        paddingTop: 0,\n    },\n    reviewtext: {\n        textAlign: 'left',\n        padding: '10px 20px 10px 20px',\n        color: '#000000',\n    },\n    modifieddate: {\n        textAlign: 'right',\n    },\n    paginationroot: {\n        display: 'inline-flex',\n    }\n});\n\nclass SearchKeyword extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            searchKeyword: \"\",\n            foodKeyword: null,\n            resultDatas: null,\n            errorMessage: null,\n            maxScore: null,\n            page: 1,\n            quantity: 10,\n        }\n\n        this.getdata = this.getdata.bind(this)\n        this.handleClickSearch = this.handleClickSearch.bind(this);\n\n        this.searchBox = this.searchBox.bind(this);\n        this.resultCard = this.resultCard.bind(this);\n        this.totalCard = this.totalCard.bind(this);\n        this.handleEmpty = this.handleEmpty.bind(this);\n        this.handlePagination = this.handlePagination.bind(this);\n        this.handleHasresult = this.handleHasresult.bind(this);\n        this.handleNoresult = this.handleNoresult.bind(this);\n    }\n\n    handleChangePage = (event, value) => {\n        this.setState(state => {\n            state.page = value;\n            return state\n        });\n    }\n\n    handleClickSearch() {\n        const { searchKeyword } = this.state\n\n        if (searchKeyword !== \"\") {\n            this.getdata(searchKeyword)\n        } else {\n            this.setState(state => {\n                state.errorMessage = \"Input new keyword\";\n                return state\n            });\n        }\n    }\n\n    async getdata(foodKeyword) {\n        axios.defaults.baseURL = 'http://localhost:5555'\n        const response = await axios.get('/reviews', {\n            \"params\" : {\n                \"query\": foodKeyword,\n            }\n        })\n\n        if (response.status === 200) {\n            \n            if (response.data[\"hits\"]) {\n                this.setState(state => {\n                    state.foodKeyword = foodKeyword;\n                    state.maxScore = response.data['max_score'];\n                    state.resultDatas = response.data['hits'];\n                    state.quantity = response.data['total']['value'];\n                    state.errorMessage = null;\n                    return state\n                });\n            } else {\n                this.setState(state => {\n                    state.errorMessage = response.data[\"message\"];\n                    state.resultDatas = null;\n                    return state\n                });\n            }\n        }\n    }\n\n    searchBox() {\n        const { classes } = this.props;\n        const { searchKeyword } = this.state;\n\n        return (\n            <Grid item xs={12}>\n                <Paper component=\"form\" className={classes.searchroot}>\n                    <InputBase\n                        className={classes.input}\n                        placeholder=\"Search Food Reviews Ex. ข้าวมันไก่ เนื้อน่อง ตับเครื่องใน\"\n                        value={searchKeyword}\n                        onChange={e => this.setState({ searchKeyword: e.target.value })}\n                    />\n                    <Divider className={classes.divider} orientation=\"vertical\" />\n                    <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"directions\" onClick={this.handleClickSearch}>\n                        <SearchIcon />\n                    </IconButton>\n                </Paper>\n            </Grid>\n        );\n    }\n\n    totalCard() {\n        const { classes } = this.props;\n        const { foodKeyword, maxScore } = this.state;\n\n        return (\n            <Fragment>\n                <Grid item xs={6} className={classes.cardTotalroot}>\n                    <Card>\n                        <CardContent className={classes.cardTotalcontent}>\n                            <Typography variant=\"subtitle1\" gutterBottom>\n                                Food Keyword : {foodKeyword}\n                            </Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid item xs={6} className={classes.cardTotalroot}>\n                    <Card>\n                        <CardContent className={classes.cardTotalcontent}>\n                            <Typography variant=\"subtitle1\" gutterBottom>\n                                Maximum Keyword Matching Score : {maxScore}\n                            </Typography>\n                        </CardContent>\n                    </Card>\n                </Grid>\n            </Fragment>\n        );\n    }\n\n    resultCard(document) {\n        const { classes } = this.props;\n\n        const source = document['_source'],\n            score = document['_score'],\n            id = source['reviewid'];\n\n        var text = document['highlight'][\"reviewtext\"];\n            // text = text.replace(\"<keyword>\", \"<b>\");\n            // text = text.replace(\"</keyword>\", \"</b>\");\n\n        var modifiedDate = new Date(source['modified'] / 1000000);\n            modifiedDate = modifiedDate.toUTCString();\n\n        return (\n            <Grid item xs={12} key={id}>\n                <Card className={classes.cardroot}>\n                    <CardHeader\n                        title={\"Review ID : \" + id}\n                        subheader={\"Keyword Matching Score : \" + score}\n                    />\n                    <CardContent className={classes.cardcontent}>\n                        <Typography variant=\"subtitle1\" gutterBottom>\n                            Review Text\n                        </Typography>\n                        <Typography variant=\"body1\" component=\"p\" className={classes.reviewtext}>\n                            {text}\n                        </Typography>\n                        <Typography variant=\"body2\" component=\"p\" color=\"secondary\" className={classes.modifieddate}>\n                            Last modified : {modifiedDate}\n                        </Typography>\n                    </CardContent>\n                </Card>\n            </Grid>\n        );\n    }\n\n    handlePagination() {\n        const { classes } = this.props;\n        const { page } = this.state;\n        \n        var count = this.state.quantity;\n        if (count > 100) {\n            count = 100\n        }\n        count = Math.ceil(count / 10);\n\n        return (\n            <Grid item xs={12}>\n                <Pagination count={count} size=\"large\" className={classes.paginationroot} page={page} onChange={this.handleChangePage} />\n            </Grid>\n        )\n    }\n\n    handleHasresult() {\n        const { resultDatas, page } = this.state;\n        return (\n            <Fragment>\n                {this.totalCard()}\n                {this.handlePagination()}\n                {resultDatas.slice(10 * (page - 1), 10 * page).map(document => (\n                    this.resultCard(document)\n                ))}\n                {this.handlePagination()}\n            </Fragment>\n        )\n    }\n\n    handleNoresult() {\n        const { classes } = this.props;\n        const { errorMessage } = this.state;\n\n        return (\n            <Grid item xs={12}>\n                <Card className={classes.cardroot}>\n                    <CardHeader\n                        title={\"Error Message : \" + errorMessage }\n                    />\n                </Card>\n            </Grid>\n        )\n    }\n\n    handleEmpty() {\n        return (\n            <Fragment></Fragment>\n        )\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { resultDatas, errorMessage } = this.state;\n\n        return (\n            <div className={classes.root}>\n                <Container>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12}>\n                            <h1>Search Top 100 Food Reviews by Matching a Keyword</h1>\n                        </Grid>\n                        {this.searchBox()}\n                        {(resultDatas && !errorMessage) ? this.handleHasresult() : this.handleEmpty()}\n                        {(!resultDatas && errorMessage)  ? this.handleNoresult() : this.handleEmpty()}\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nSearchKeyword.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SearchKeyword);","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Container } from \"@material-ui/core\";\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\n\nconst axios = require('axios');\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        minHeight: '100vh'\n    },\n    searchroot: {\n        padding: '2px 4px',\n        display: 'inline-flex',\n        alignItems: 'center',\n        width: '73vw',\n        minHeight: '7vh',\n    },\n    input: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n    cardroot: {\n        display: 'inline-block',\n        width: '73vw',\n        textAlign: 'left',\n        color: '#1b6ca8',\n    },\n    reviewtext: {\n        textAlign: 'left',\n        padding: '10px 20px 10px 20px',\n        color: '#000000',\n    },\n    modifieddate: {\n        textAlign: 'right',\n    },\n    textfield: {\n        backgroundColor: \"white\",\n    }\n});\n\nclass EditID extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            searchID: \"\",\n            modifiedText: \"\",\n        }\n\n        this.editdata = this.editdata.bind(this)\n        this.handleClickSearch = this.handleClickSearch.bind(this);\n\n        this.searchBox = this.searchBox.bind(this);\n        this.inputBox = this.inputBox.bind(this);\n        this.handleEmpty = this.handleEmpty.bind(this);\n    }\n\n    handleClickSearch() {\n        const { searchID, modifiedText } = this.state\n\n        if (searchID !== \"\" && /^\\d+$/.test(searchID)) {\n            this.editdata(searchID, modifiedText)\n        }\n    }\n\n    async editdata(reviewID, modifiedText) {\n        axios.defaults.baseURL = 'http://localhost:5555'\n        const response = await axios.put('/reviews/' + reviewID, modifiedText, {})\n        if (response.status === 200) {\n            if (response.data[\"result\"] === \"updated\" && response.data[\"id\"]) {\n                alert(\"Update Successful\")\n            } else {\n                alert(\"Update Unsuccessful : \" + response.data[\"Messages\"])\n            }\n        }\n    }\n\n    searchBox() {\n        const { classes } = this.props;\n        const { searchID } = this.state;\n\n        return (\n            <Grid item xs={12}>\n                <Paper component=\"form\" className={classes.searchroot}>\n                    <InputBase\n                        className={classes.input}\n                        placeholder=\"Search Food Reviews Ex. 1\"\n                        value={searchID}\n                        onChange={e => this.setState({ searchID: e.target.value })}\n                    />\n                    <Divider className={classes.divider} orientation=\"vertical\" />\n                    <IconButton color=\"primary\" className={classes.iconButton} onClick={this.handleClickSearch}>\n                        <EditIcon />\n                    </IconButton>\n                </Paper>\n            </Grid>\n        );\n    }\n\n    inputBox() {\n        const { classes } = this.props;\n        const { modifiedText } = this.state;\n\n        return (\n            <Grid item xs={12}>\n                <Paper component=\"form\" className={classes.searchroot}>\n                    <InputBase\n                        className={classes.input}\n                        placeholder=\"Input Text Here\"\n                        value={modifiedText}\n                        multiline\n                        fullWidth\n                        rows={10}\n                        rowsMax={10}\n                        onChange={e => this.setState({ modifiedText: e.target.value })}\n                    />\n                </Paper>\n            </Grid>\n        );\n    }\n\n    handleEmpty() {\n        return (\n            <Fragment></Fragment>\n        );\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div className={classes.root}>\n                <Container>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12}>\n                            <h1>Edit Food Review by reviewID</h1>\n                        </Grid>\n                        {this.searchBox()}\n                        {this.inputBox()}\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nEditID.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(EditID);","import React from \"react\";\nimport {\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nimport SearchID from \"./pages/SearchID\";\nimport SearchKeyword from \"./pages/SearchKeyword\";\nimport EditID from \"./pages/EditID\";\n\nexport default function MyRouter() {\n    return (\n        <Switch>\n            <Route path=\"/keyword\">\n                <SearchKeyword />\n            </Route>\n            <Route path=\"/edit\">\n                <EditID />\n            </Route>\n            <Route path=\"/\">\n                <SearchID />\n            </Route>\n        </Switch>\n    );\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport './App.css';\n\nimport Header from \"./pages/Header\";\nimport MyRouter from \"./Router\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Header />\n          <MyRouter />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}